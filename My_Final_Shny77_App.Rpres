My_Final_Shny_App777
========================================================
## author: Hayford Tetteh 
## date: 23 /June / 2020

# Executive Summary
### This peer assessed assignment has two parts. First, you will create a Shiny application and deploy it on Rstudio's servers. Second, you will use Slidify or Rstudio Presenter to prepare a reproducible pitch presentation about your application.


========================================================
# Documentation

### - using the US Car data i have created an interactive shiny app where users can select columns in the data set to display the content in Data table.

### - i have also added select input where users can select onle the attributes that they are interested in to display in the table.

### - I have incleded a regerssion plot, where users can plot an attriibute against the price value of each car in the dataset.

### - Users can use the search bar to search for a particular brand, model, year, color of their favourite car. You can input more that one seach item in the search bar to look for what for you want.

### - Lastly there is general plot to some to brands of car in the various states of America. 

========================================================

library(shiny)
library(ggplot2)
library(leaflet)

Carss_df <-read.csv("statelatlong.csv",sep=",")
Cars_df <-read.csv("USA_cars_datasets.csv",sep=",")

Cars <- merge(Cars_df, Carss_df, by="Cities")

head(Cars)

data <- Cars

shinyUI(fluidPage(
  titlePanel("Buy Cheap Used Cars Here!"),
  theme = shinythemes::shinytheme('flatly'),
  # Create a new Row in the UI for selectInputs
  fluidRow(
    column(2,
           selectInput("brand",
                       "Brand:",
                       multiple = TRUE,
                       c("All",
                       unique(as.character(Cars$Brand))))
    ),
    column(2,
           selectInput("model",
                       "Model:",
                       multiple = TRUE,
                       c("All",
                      unique(as.character(Cars$Model))))
    ),
    column(2,
           selectInput("color",
                       "Color:",
                       multiple = TRUE,
                       c("All",
                       unique(as.character(Cars$Color))))
    ),
    column(2,
           selectInput("state",
                       "State:",
                       multiple = TRUE,
                       c("All",
                       unique(as.character(Cars$State))))
    ),
    column(2,
           selectInput("price",
                       "Price:",
                       multiple = TRUE,
                       c("All",
                       unique(as.character(Cars$Price))))
  ),
  column(2,
         selectInput("mileage",
                     "Mileage:",
                      multiple = TRUE,
                      c("All",
                      unique(as.character(Cars$Mileage))))
  ),
  column(2,
         selectInput("year",
                     "Year:",
                     multiple = TRUE,
                     c("All",
                     unique(as.character(Cars$Year))))
  ),
  
  column(4,
  selectInput('x', 'Build a regression model of Price against:',
              choices = names(Cars)[-1])

  )
  ),
  mainPanel(width = 12, 
            tabsetPanel( 
              tabPanel(title = 'Car Table',
                       DT::dataTableOutput("table")),
              tabPanel(title = 'Regression Plot',
                       plotOutput('regPlot')),
              tabPanel(title = 'General Map',
                       leafletOutput("map"))
                       )  
              )
  ))
========================================================

library(shiny)
library(ggplot2)
library(leaflet)
library(htmltools)

Carss_df <-read.csv("statelatlong.csv",sep=",")
Cars_df <-read.csv("USA_cars_datasets.csv",sep=",")

Cars <- merge(Cars_df, Carss_df, by="Cities")

#head(Cars)

data <- Cars

shinyServer(function(input, output,session) {
  
  # Filter data based on selections
  output$table <- DT::renderDataTable(DT::datatable({
    if (input$mileage != "All") {
      data <- data[data$Mileage == input$mileage,]
    }
    if (input$brand != "All") {
      data <- data[data$Brand == input$brand,]
    }
    if (input$model != "All") {
      data <- data[data$Model == input$model,]
    }
    if (input$price != "All") {
      data <- data[data$Price == input$price,]
    }
    if (input$color != "All") {
      data <- data[data$Color == input$color,]
    }
    if (input$state != "All") {
      data <- data[data$State == input$state,]
    }
    if (input$year != "All") {
      data <- data[data$Year == input$year,]
    }
    output$regPlot <- renderPlot({
      regFormula <- reactive({
        as.formula(paste('Price ~', input$x))
      })
      output$regPlot <- renderPlot({
        par(mar = c(4, 4, .1, .1))
        plot(regFormula(), data = Cars, pch = 19)
      })
    })
    data
  }))
  
========================================================
output$map <- renderLeaflet({
    my_map <- data.frame(Cities = Cars$Cities,
                         Pric = Cars$Price,
                         Bran = Cars$Brand,
                         Lat =  Cars$Latitude,
                         Long = Cars$Longitude,
                         Year = Cars$Year,
                         Cond = Cars$Condition,
                         Mile=  Cars$Mileage,
                         Col =  Cars$Color,
                         State = Cars$State)
    map <- my_map %>%
      leaflet() %>%
      addTiles() %>%
      addCircleMarkers(popup= paste
                       ("<br>Brand: ", 
                         htmlEscape(Cars$Brand),
                         "<br>Model: ", 
                         htmlEscape(Cars$Model),
                         "<br>Mileage: ", 
                         htmlEscape(Cars$Mileage),
                         "<br>Year: ", 
                         htmlEscape(Cars$Year),
                         "<br>Cities: ", 
                         htmlEscape(Cars$Cities),
                         "<br>State: ", 
                         htmlEscape(Cars$State),
                         "<br>Color: ",
                         htmlEscape(Cars$Color),
                         "<br>Price: ",
                         formatC(Cars$Price,
                                 format = "d", big.mark = ",")
                       ))
    map
    
  })
  
   
})